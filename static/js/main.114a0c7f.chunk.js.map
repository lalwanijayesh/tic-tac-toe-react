{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","winLine","includes","rows","columns","j","push","renderSquare","React","Component","Game","state","history","Array","fill","location","stepNumber","xIsNext","isSortAsc","slice","length","calculateResult","row","Math","floor","col","setState","concat","step","status","moves","map","move","desc","jumpTo","current","result","winner","line","handleClick","toggleSort","reversed","reverse","lines","a","b","c","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.114a0c7f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={'square ' + (props.highlight ? 'square-highlight' : '')}\r\n                onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square key={i}\r\n                    value={this.props.squares[i]}\r\n                    highlight={this.props.winLine && this.props.winLine.includes(i)}\r\n                    onClick={() => this.props.onClick(i)}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const size = 3;\r\n        let rows = [];\r\n        for (let i = 0; i < size; i++) {\r\n            let columns = [];\r\n            for (let j = 0; j < size; j++) {\r\n                columns.push(this.renderSquare(j + i * size));\r\n            }\r\n            rows.push(\r\n                <div key={i} className=\"board-row\">\r\n                    {columns}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>{rows}</div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                location: null\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            isSortAsc: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (squares[i] || calculateResult(squares)) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        const row = Math.floor(i / 3) + 1;\r\n        const col = i % 3 + 1;\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: '(' + row + ', ' + col + ')'\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n\r\n    toggleSort() {\r\n        this.setState({\r\n            isSortAsc: !this.state.isSortAsc\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move + ' - ' + step.location :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}\r\n                            className={move === this.state.stepNumber ? 'item-selected' : ''}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        const current = history[this.state.stepNumber];\r\n        const result = calculateResult(current.squares);\r\n        let status;\r\n        if (result) {\r\n            if (result.winner) {\r\n                status = 'Winner: ' + result.winner;\r\n            } else {\r\n                status = 'Game Draw';\r\n            }\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board squares={current.squares}\r\n                           winLine={result && result.winner && result.line}\r\n                           onClick={(i) => this.handleClick(i)}/>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button className=\"btn-sort\"\r\n                            onClick={() => this.toggleSort()}>\r\n                        Sort {this.state.isSortAsc ?\r\n                        <span>&uarr;</span> : <span>&darr;</span>}\r\n                    </button>\r\n                    <ol reversed={!this.state.isSortAsc}>\r\n                        {this.state.isSortAsc ? moves : moves.reverse()}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateResult(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                winner: squares[a],\r\n                line: lines[i]\r\n            };\r\n        }\r\n    }\r\n    if (squares.every(value => value !== null)) {\r\n        return 'Draw';\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}